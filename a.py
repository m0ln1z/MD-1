from bs4 import BeautifulSoup

def split_html(html_content, max_len=4096):
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å—Ç—Ä–æ–∫—É
    raw_html = str(soup)
    
    # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ max_len, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
    if len(raw_html) <= max_len:
        return [raw_html]
    
    fragments = []
    start = 0
    
    while start < len(raw_html):
        end = start + max_len
        
        # –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ –Ω–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª–∏–Ω—ã, –∏—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
        if end < len(raw_html):
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
            close_tag_pos = raw_html.rfind('>', start, end)
            if close_tag_pos == -1:
                close_tag_pos = end  # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ—Å—Ç–æ —Ä–µ–∂–µ–º –Ω–∞ max_len —Å–∏–º–≤–æ–ª–æ–≤
        else:
            close_tag_pos = len(raw_html)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∞—Ç—Ä–∏–±—É—Ç–∞
        if raw_html[close_tag_pos-1] == '=':
            close_tag_pos = raw_html.find('>', close_tag_pos)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
        fragment = raw_html[start:close_tag_pos + 1]  # –í–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
        fragments.append(fragment)
        
        start = close_tag_pos + 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É –Ω–∞—á–∞–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã
    for i in range(len(fragments)):
        fragments[i] = str(BeautifulSoup(fragments[i], 'html.parser'))  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏
        fragment_soup = BeautifulSoup(fragments[i], 'html.parser')
        for tag in fragment_soup.find_all():
            if tag.name == 'a' and not tag.get_text(strip=True):
                tag.decompose()  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏ <a></a>
        fragments[i] = str(fragment_soup)

    return fragments

# –ü—Ä–∏–º–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ 500 —Å–∏–º–≤–æ–ª–æ–≤
html_message = """<strong>üïí Some tasks are missing worklogs!</strong>
<mention id="U1024">Justin Kirvin</mention>
Here is the list of tasks that have been in status without worklogs for more than <strong>1h</strong> :arrow_down:

<a href="tg://user?id=3485734953">Talbert Gannaway</a>
<strong>In progress</strong>
<a href="https://mockdata.atlassian.net/browse/ABC-12634"><code>ABC-12634</code></a> Lorem ipsum dolor sit amet, consectetur adipiscing elit.
...
<a href="https://mockdata.atlassian.net/browse/ABC-12408"><code>ABC-12408</code></a> Nullam tincidunt vulputate nibh a placerat."""

# –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
fragments = split_html(html_message, max_len=500)

# –í—ã–≤–æ–¥ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
for i, fragment in enumerate(fragments):
    print(f"–§—Ä–∞–≥–º–µ–Ω—Ç {i+1}:\n{fragment}\n")
